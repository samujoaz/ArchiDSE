

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <fstream>
#include <sstream>

#include "fonctionsUtils.h"
#include "generatefile.h"

using namespace std;


int main(int argc, char *argv[])
{
 
  int nb_cpu=0, nb_cache=0, nb_dsp=0,nb_ligne=0;
  string line, filename,tmp; 
  char dir[100];
  CPU MonCpu=NULL,cpu_tmp=NULL;
  DSP MonDsp=NULL,dsp_tmp=NULL;
  CACHE MesCacheL1=NULL,MesCacheL2=NULL,cacheL1_tmp=NULL,cacheL2_tmp=NULL;
  COMPONENTCPU MesComposantsCPU=NULL,CompoCPU_temp=NULL;
  COMPONENTDSP MesComposantsDSP=NULL,CompoDSP_temp=NULL;

  ifstream listing_file("composition.txt");   
 
  if(listing_file)
  {
    uint freq=0, taille=0,assoc=0,bpl=0;
    uint indice_cpu=0,indice_cacheL1=0,indice_cacheL2=0,indice_dsp=0;
    
    while(listing_file>>line){ /// on lit mot par mot le fichier et on instantie les composants
      
      nb_ligne++;
      if(line == "component") 
      {
	listing_file>>line;
	if(line=="PU")
	{
	    listing_file>>line;
	    listing_file>>filename;
	    listing_file>>freq;
	    MonCpu=ADD_CPU(MonCpu,filename,freq);
	}
	else{
	    if(line=="CACHE")
	    {
	      listing_file>>line;
	      tmp = line.substr(0,line.size()-2);	      	      
	      listing_file>>taille;
	      listing_file>>assoc;
	      listing_file>>bpl;
	      if(tmp =="L1") MesCacheL1=ADD_CACHE(MesCacheL1,taille,assoc,bpl);
	      else {if(tmp =="L2") MesCacheL2=ADD_CACHE(MesCacheL2,taille,assoc,bpl);}
	    }
	    else{
	      if(line =="DSP")
	      {
		listing_file>>line;
		listing_file>>filename;
		listing_file>>freq;
		MonDsp=ADD_DSP(MonDsp,filename,freq);
	      }
	    }
	}
	
      }/// end if component
      else{
	  if(line =="connection")
	  {
	      listing_file>>line;
	      tmp = line.substr(0,line.size()-1);
	      if(tmp =="CPU")
	      {
		indice_cpu=atoi(line.substr(tmp.size(),line.size()).c_str());
		listing_file>>line;
		listing_file>>line;
		tmp=line.substr(0,line.size()-1);
		if(tmp=="L1_")
		{
		  indice_cacheL1=atoi(line.substr(tmp.size(),line.size()).c_str());
		  MesComposantsCPU = ADD_COMPONENTCPU(MesComposantsCPU,AccessToCPU(MonCpu,indice_cpu),AccessToCACHE(MesCacheL1,indice_cacheL1),indice_cacheL1,indice_cpu,"cpu");
		}
	      }
	      else {
		if(tmp =="DSP")
		{
		    indice_dsp=atoi(line.substr(tmp.size(),line.size()).c_str());
		    listing_file>>line;
		    listing_file>>line;
		    tmp=line.substr(0,line.size()-1);
		      if(tmp=="L1_")
		      {			
			indice_cacheL1=atoi(line.substr(tmp.size(),line.size()).c_str());
			MesComposantsDSP = ADD_COMPONENTDSP(MesComposantsDSP,AccessToDSP(MonDsp,indice_dsp),AccessToCACHE(MesCacheL1,indice_cacheL1),indice_cacheL1,indice_dsp,"dsp");
		      }
		}
	      else{
		if(tmp=="L1_")
		{
		  indice_cacheL1=atoi(line.substr(tmp.size(),line.size()).c_str());
		  listing_file>>line;
		  listing_file>>line;
		  tmp=line.substr(0,line.size()-1);
		  if(tmp=="L2_")
		  {
		      indice_cacheL2=atoi(line.substr(tmp.size(),line.size()).c_str());
		      cacheL1_tmp=AccessToCACHE(MesCacheL1,indice_cacheL1);
		      cacheL2_tmp=AccessToCACHE(MesCacheL2,indice_cacheL2);
		      
		      if(GetNamelinkCache(cacheL1_tmp) =="dsp"){
		      CompoDSP_temp=AccessToCOMPONENTDSP(MesComposantsDSP,GetLinkCacheL1DSP(MesComposantsDSP,indice_cacheL1));
		      ADD_CACHE_L2_TO_COMPONENTDSP(CompoDSP_temp,cacheL2_tmp);
		      }
		      else{
			if(GetNamelinkCache(cacheL1_tmp) =="cpu"){
			CompoCPU_temp=AccessToCOMPONENTCPU(MesComposantsCPU,GetLinkCacheL1CPU(MesComposantsCPU,indice_cacheL1));
			ADD_CACHE_L2_TO_COMPONENTCPU(CompoCPU_temp,cacheL2_tmp);
			}
		      }
		  }
		}
	      
	      }
	    }
	  }
	   else 
	   {
	    nb_ligne--;
	    cout <<" \n\n ATTENTION ===> Problème à la ligne: "<<nb_ligne<<" <==="<<endl; 
	    listing_file.seekg(-listing_file.tellg(),ios::cur);
	    while(nb_ligne>0){getline(listing_file,line);nb_ligne--;}
	    cout<<line <<" :Cette ligne n'est pas correcte \n \n"<<endl;
	    exit(0);
	    
	      if(line.substr(0,9)=="component")
	      {
		if(line.substr(10,2)=="PU"){
		  cout<<" Required format CPU :";
		  cout<<" component PU CPUX file_name.txt freq "<<endl;
		  cout<<" X : cpu number"<<endl;
		  cout<<" file_name.txt : architecture decription texte file"<<endl;
		  cout<<" freq: cpu working frequency"<<endl;
		  cout<<" Example: component PU CPU0 cortexA8.txt 200\n"<<endl;
		  exit(0);
		}
	      else
	      {
		if(line.substr(10,5)=="CACHE"){
		  cout<<" Required format cache memory :";
		  cout<<" component CACHE LX_Y A B C "<<endl; 
		  cout<<" X : cache type 1 or 2"<<endl;
		  cout<<" Y : cache number"<<endl;
		  cout<<" A : cache size "<<endl;
		  cout<<" B : cache associativity "<<endl;
		  cout<<" C : cache nb byte/line "<<endl;
		  cout<<" Example: component CACHE L1_2 32 32 32\n"<<endl;
		  exit(1);
		}
	      }
	      }
	      else{
		if(line.substr(0,9) =="connection"){
		cout<<" Required format connection :";
		cout<<" component CX -> CY"<<endl; 
		cout<<" CX : can be  a PU or a cache memory or RAM ,X mean the component number"<<endl;
		cout<<" CY : only RAM or cache memory ,Y mean the component number"<<endl;
		cout<<" Example: \n\tconnection L1_0 -> L2_0 (link a cache L1 to a cache L2) \n \t";
		cout<<"connection CPU1 -> L1_1 (link a PU to a cache L2)\n"<<endl;
		exit(2);
		}
	      }
	   }

      }
	
      }///end while(listing_file>>line)
    }///end if(listing_file)
  else{
    cout<<"ERREUR: Impossible d'ouvrir le fichier de la liste des architectures"<<endl;
    exit(0);
  }
  
  listing_file.close();
  nb_cpu= NB_CPU(MonCpu);
  nb_dsp= NB_DSP(MonDsp);
  nb_cache= NB_CACHE(MesCacheL1);
  nb_cache= NB_CACHE(MesCacheL2);
//   Affiche_COMPONENTDSP(MesComposantsDSP);  
//   Affiche_COMPONENTCPU(MesComposantsCPU);
  uint i=0;
  CompoCPU_temp = MesComposantsCPU;
  while(i++<nb_cpu)
  {
    sprintf(dir,"slice_cpu_%d.txt",CompoCPU_temp->CPU_->indice_CPU);
    GenerateCpuFile(dir,"slice.txt",CompoCPU_temp);
    CompoCPU_temp=CompoCPU_temp->next;
  }  
  i=0;
  while(i++<nb_dsp)
  {
    sprintf(dir, "slice_dsp_%d.txt",CompoDSP_temp->DSP_->indice_DSP);
    GenerateDspFile(dir,"slice.txt",CompoDSP_temp);
    CompoDSP_temp=CompoDSP_temp->next;
  }
   return 0;
}
  
